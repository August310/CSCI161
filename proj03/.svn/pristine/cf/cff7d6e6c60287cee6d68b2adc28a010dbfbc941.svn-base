/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package BookStore;

import ProvidedClasses.BookStoreFactory;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import org.junit.Test;

/**
 *
 * @author August Preuss
 */
public class BookStoreTest {
    
    private BookStore createSampleBookStore(){
        return BookStoreFactory.getBookStoreInstance();
    }
    
    private BookList createSampleBookList(){
        return BookStoreFactory.getBookCollectionInstance();
    }
    
    @Test
    public void testLookUpAuthorFound(){
        BookStore store = createSampleBookStore();
        
        String expected = "Charles Dickens";
        
        String actual = store.lookUpAuthor("Oliver Twist");
       
        assertEquals(expected, actual);
    }
    
    @Test
    public void testLookUpAuthorNotFound(){
        BookStore store = createSampleBookStore();
        
        String expected = "Could Not Find Book";
        
        String actual = store.lookUpAuthor("Book doesn't exist");
        
        assertEquals(expected, actual);
    }
    
    @Test
    public void testLookUpPriceFound(){
        BookStore store = createSampleBookStore();
       
        double expected = 27.99;
        
        double actual = store.lookUpPrice("Don Quixote");
        
        assertEquals(expected, actual, 0.01);
    }
    
    @Test
    public void testLookUpPriceNotFound(){
        BookStore store = createSampleBookStore();
        
        double expected = Double.NaN;
        
        double actual = store.lookUpPrice("Nonexistent Book");
        
        assertEquals(expected, actual, 0.01);
    }
    
    @Test
    public void testSearchForTitleFound(){
        BookStore store = createSampleBookStore();
        
        BookList expected = new BookList();
        expected.add(new Book("Harry Potter and the Goblet of Fire", "J. K. Rowling", 27.99));
        
        BookList searchResult = store.searchForTitle("Harry Potter and the Goblet of Fire");
        
        assertEquals(expected, searchResult);
        assertEquals(1, searchResult.getSize());
        assertEquals("Harry Potter and the Goblet of Fire", searchResult.getBook(0).getTitle());        
        
    }
    
    @Test
    public void testSearchForTitleNotFound(){
        BookStore store = createSampleBookStore();
        
        BookList expected = new BookList();
        
        BookList searchResult = store.searchForTitle("Nonexistent Book");
        
        assertEquals(expected, searchResult);
        assertEquals(0, searchResult.getSize());
        
    }
    
    @Test 
    public void testSearchForAuthorFound(){
        BookStore store = createSampleBookStore();
        
        BookList expected = new BookList();
        expected.add(new Book("Anna Karenina", "Leo Tolstoy", 27.99));
        
        BookList searchResult = store.searchForAuthor("Leo Tolstoy");
        
        assertEquals(expected, searchResult);
        assertEquals(1, searchResult.getSize());
        assertEquals("Leo Tolstoy", searchResult.getBook(0).getAuthor());
    }
    
    @Test 
    public void testSearchForAuthorNotFound(){
        BookStore store = createSampleBookStore();
        
        BookList expected = new BookList();
        
        BookList searchResult = store.searchForAuthor("Nonexistent Book");
        
        assertEquals(expected, searchResult);
        assertEquals(0, searchResult.getSize());
    }
    
    @Test
    public void testSearchForPriceFound(){
        BookStore store = createSampleBookStore();
        
        BookList expected = new BookList();
        expected.add(new Book("A Study in Scarlet", "Arthur Conan Doyle", 8.95));
        
        BookList searchResult = store.searchForPrice("9.00");
        
        assertEquals(expected, searchResult);
        assertEquals(1, searchResult.getSize());
        assertEquals("A Study in Scarlet", searchResult.getBook(0).getTitle());
    }
    
    @Test
    public void testSearchForPriceNotFound(){
        BookStore store = createSampleBookStore();
        
        BookList expected = new BookList();
        
        
        BookList searchResult = store.searchForPrice("Nonexistent Book");
        
        assertEquals(expected, searchResult);
        assertEquals(0, searchResult.getSize());
        
    }
    
    @Test
    public void testGetLowestPriceFound(){
        BookStore store = createSampleBookStore();
        
        Book expected = new Book("Treasure Island", "Robert Louis Stevenson", 7.95);
        
        Book actual = store.getLowestPrice();
        
        assertEquals(expected, actual);
        assertEquals(7.95, actual.getPrice(), 0.01);
        
    }
    //check if right
    @Test 
    public void testGetLowestPriceNotFound(){
        BookStore store = createSampleBookStore();
        
        Book expected = new Book("Nonexistent", "Nonexistent", 0.00);
        
        Book actual = store.getLowestPrice();
        
        assertEquals(expected, actual);
    }
    
    @Test
    public void testSearchByISBNFound(){
        BookStore store = createSampleBookStore();
        
        int searchISBN = 123456;
        
        Book expected = new Book("Flowers for Algernon", "Daniel Keyes", 13.95, true, searchISBN);
                
        BookList actual = store.searchByISBN(searchISBN);
        
        assertEquals(expected, actual.getBook(0));
        
        
    }
    
    @Test
    public void testSearchByISBNNotFound(){
        BookStore store = createSampleBookStore();
        
        int searchISBN = 000000;
        
        BookList result = store.searchByISBN(searchISBN);
        
        assertEquals(0, result.getSize());
    }
    
    
    @Test
    public void testAddWorks(){
        BookList list = createSampleBookList();
        
        int initialSize = list.getSize();
        
        Book newBook = new Book("Diary of a Wimpy Kid", "Jeff Kinny", 10.99);
        
        list.add(newBook);
        
        assertEquals(initialSize + 1, list.getSize());
        assertEquals(newBook, list.getBook(initialSize));
        
        
    }
    
    @Test
    public void testAddIsNull(){
        BookList list = createSampleBookList();
        int initialSize = list.getSize();
        
        Book nullBook = null;
        
        list.add(nullBook);
        
        assertEquals(initialSize, list.getSize());
        
        
    }
    
    
    @Test
    public void testRemoveWorks(){
        BookList list = createSampleBookList();
        
        int initialSize = list.getSize();
        
        Book removedBook = list.getBook(2);
        
        list.remove(removedBook);
        
        assertEquals(initialSize - 1, list.getSize());
        
        
        
    }
    
    @Test
    public void testRemoveNull(){
        BookList list = createSampleBookList();
        
        int initialSize = list.getSize();
        
        Book nullBook = null;
        
        list.remove(nullBook);
        
        assertEquals(initialSize, list.getSize());
    }
    
    @Test
    public void testGetBook(){
        BookList list = createSampleBookList();
        
        Book expected = new Book("Don Quixote", "Miguel de Cervantes", 27.99);
        
        Book actual = list.getBook(0);
        
        assertEquals(expected, actual);
    }
    
    @Test
    public void testGetBookInvalidIndex(){
        BookList list = createSampleBookList();
        
        Book expected = null;
        
        Book actual = list.getBook(-1);
        
        assertEquals(expected, actual);
    }
    
    @Test 
    public void testSortListWorks(){
        BookList list = createSampleBookList();
        list.sortList();
        
        for(int i = 1; i < list.getSize(); i++){
            assertTrue(list.getBook(i - 1).getPrice() <= list.getBook(i).getPrice());
        }
    }
    
    @Test
    public void testSortListSizeLessThanZero(){
        BookList list = new BookList();
        list.sortList();
        assertEquals(0, list.getSize());
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}

